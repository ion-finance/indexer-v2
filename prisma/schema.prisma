// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PoolType {
  CPMM
  CLMM
}

model Pool {
  id            String   @id // pool address
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  name          String
  tokenXAddress String
  tokenYAddress String
  binStep       Int      @default(0) // 0 <= binStep <= 2^8 -1 (255)
  activeBinId   Int      @default(0) // 0 <= activeBinId <= 2^24 -1 (16777215)
  type          PoolType @default(CLMM)
  reserveX      String   @default("0")
  reserveY      String   @default("0")
  lpSupply      String   @default("0")
}

model Token {
  id                  String   @id
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  jettonMinterAddress String
  name                String
  symbol              String
  image               String
  decimals            Int
}

model Bins {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  binId       Int
  poolAddress String
  reserveX    String
  reserveY    String
}

model Deposit {
  id              String   @id // txHash
  eventId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  timestamp       Int
  poolAddress     String
  senderAddress   String
  receiverAddress String
  tokenAddress    String
  amountX         String   @default("0")
  amountY         String   @default("0")
}

model Withdraw {
  id              String   @id // txHash
  eventId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  timestamp       Int
  poolAddress     String
  senderAddress   String
  receiverAddress String
  amountX         String   @default("0")
  amountY         String   @default("0")
}

model Swap {
  id              String   @id // txHash
  eventId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  timestamp       Int
  poolAddress     String
  senderAddress   String
  receiverAddress String
  amountIn        String
  amountOut       String
  swapForY        Boolean
  activeBinId     Int      @default(0)
}

model TransferBatch {
  id            String   @id // txHash
  eventId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  timestamp     Int
  poolAddress   String
  senderAddress String
  fromAddress   String
  toAddress     String
  amounts       Json     @default("{}")
}

model LpTokenWallet {
  id           String   @id @default(uuid()) // TODO use wallet address?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  poolAddress  String
  ownerAddress String
  amount       String   @default("0") // CPMM
  shares       Json     @default("{}") // CLMM
}

enum OrderType {
  PLACED
  CANCELLED
  EXECUTED
  CLAIMED
}

model OrderHistory {
  id                 String    @id // txHash
  eventId            String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  timestamp          Int
  poolAddress        String
  senderAddress      String
  positionAddress    String
  relatedOwnerAddres String? // In case of executed order, tx is only one but there are many order owners
  binId              Int
  orderForY          Boolean
  positionId         Int
  amountX            String
  amountY            String
  orderType          OrderType
}

model Order {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  timestamp       Int
  poolAddress     String
  ownerAddress    String
  positionAddress String
  binId           Int
  positionId      Int
  amountX         String    @default("0")
  amountY         String    @default("0")
  status          OrderType @default(PLACED)
  orderForY       Boolean
}

model TokenPrice {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  tokenSymbol String
  price        String
}

model Operation {
  id                        Int      @id @default(autoincrement())
  poolTxHash                String   @unique
  poolAddress               String?
  routerAddress             String?
  poolTxLt                  BigInt?
  poolTxTimestamp           DateTime?
  destinationWalletAddress  String?
  operationType             String?
  // success                   Boolean
  exitCode                  String
  asset0Address             String?
  asset0Amount              String?
  asset0Delta               String?
  asset0Reserve             String?
  asset1Address             String?
  asset1Amount              String?
  asset1Delta               String?
  asset1Reserve             String?
  lpTokenDelta              String?
  lpTokenSupply             String?
  lpFeeAmount               String?
  protocolFeeAmount         String?
  referralFeeAmount         String?
  walletAddress             String?
  walletTxLt                BigInt?
  walletTxHash              String?   
  walletTxTimestamp         DateTime?
}

// last block or tx data
// heath check
model IndexerState {
  key   String @id
  value String
}
